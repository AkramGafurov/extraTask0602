{"ast":null,"code":"var _jsxFileName = \"D:\\\\it\\\\itIncubator\\\\dopy\\\\sprint2\\\\extraTask0502\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { Todolist } from \"./Todolist\";\nimport { useState } from \"react\";\nimport { v1 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // let todolistID1 = v1()\n  // let todolistID2 = v1()\n  //\n  // let [todolists, setTodolists] = useState<TodolistType[]>([\n  //     {id: todolistID1, title: 'What to learn', filter: 'all'},\n  //     {id: todolistID2, title: 'What to buy', filter: 'all'},\n  // ])\n  //\n  // let [tasks, setTasks] = useState<TasksStateType>({\n  //     [todolistID1]: [\n  //         {id: v1(), title: 'HTML&CSS', isDone: true},\n  //         {id: v1(), title: 'JS', isDone: true},\n  //         {id: v1(), title: 'ReactJS', isDone: false},\n  //     ],\n  //     [todolistID2]: [\n  //         {id: v1(), title: 'Rest API', isDone: true},\n  //         {id: v1(), title: 'GraphQL', isDone: false},\n  //     ],\n  // })\n\n  let todolistID1 = v1();\n  let todolistID2 = v1();\n  let [todolists, setTodolists] = useState([{\n    id: todolistID1,\n    title: 'What to learn'\n  }, {\n    id: todolistID2,\n    title: 'What to buy'\n  }]);\n  let [tasks, setTasks] = useState({\n    [todolistID1]: {\n      data: [{\n        id: v1(),\n        title: 'HTML&CSS',\n        isDone: true\n      }, {\n        id: v1(),\n        title: 'JS',\n        isDone: true\n      }, {\n        id: v1(),\n        title: 'ReactJS',\n        isDone: false\n      }],\n      filter: 'all'\n    },\n    [todolistID2]: {\n      data: [{\n        id: v1(),\n        title: 'Rest API',\n        isDone: true\n      }, {\n        id: v1(),\n        title: 'GraphQL',\n        isDone: false\n      }],\n      filter: 'all'\n    }\n  });\n  const removeTask = (taskId, todolistId) => {\n    const newToDoListTasks = {\n      ...tasks,\n      todolistId: {\n        ...tasks.todolistId,\n        data: tasks.todolistId.data.filter(task => task.id !== todolistId)\n      }\n    };\n    setTasks(newToDoListTasks);\n\n    // const newTodolistTasks = {...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== taskId)}\n    // setTasks(newTodolistTasks)\n  };\n  const addTask = (title, todolistId) => {\n    // const newTask = {\n    //     id: v1(),\n    //     title: title,\n    //     isDone: false\n    // }\n    // const newTodolistTasks = {...tasks, [todolistId]: [newTask, ...tasks[todolistId]]}\n    // setTasks(newTodolistTasks)\n  };\n  const changeTaskStatus = (taskId, taskStatus, todolistId) => {\n    // const newTodolistTasks = {\n    //     ...tasks,\n    //     [todolistId]: tasks[todolistId].map(t => t.id == taskId ? {...t, isDone: taskStatus} : t)\n    // }\n    // setTasks(newTodolistTasks)\n  };\n  const changeFilter = (filter, todolistId) => {\n    // const newTodolists = todolists.map(tl => {\n    //     return tl.id === todolistId ? {...tl, filter} : tl\n    // })\n    // setTodolists(newTodolists)\n  };\n  const removeTodolist = todolistId => {\n    // const newTodolists = todolists.filter(tl => tl.id !== todolistId)\n    // setTodolists(newTodolists)\n    //\n    // delete tasks[todolistId]\n    // setTasks({...tasks})\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: todolists.map(tl => {\n      const allTodolistTasks = tasks[tl.id].data;\n      let tasksForTodolist = allTodolistTasks;\n      if (tasks[tl.id].filter === 'active') {\n        tasksForTodolist = allTodolistTasks.filter(task => !task.isDone);\n      }\n      if (tasks[tl.id].filter === 'completed') {\n        allTodolistTasks.filter(task => task.isDone);\n      }\n      return /*#__PURE__*/_jsxDEV(Todolist, {\n        todolistId: tl.id,\n        title: tl.title,\n        tasks: tasksForTodolist,\n        removeTask: removeTask,\n        changeFilter: changeFilter,\n        addTask: addTask,\n        changeTaskStatus: changeTaskStatus,\n        filter: tasks[tl.id].filter,\n        removeTodolist: removeTodolist\n      }, tl.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"DJOgLiYG7wtVmqPdGu60mF/havM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Todolist","useState","v1","jsxDEV","_jsxDEV","App","_s","todolistID1","todolistID2","todolists","setTodolists","id","title","tasks","setTasks","data","isDone","filter","removeTask","taskId","todolistId","newToDoListTasks","task","addTask","changeTaskStatus","taskStatus","changeFilter","removeTodolist","className","children","map","tl","allTodolistTasks","tasksForTodolist","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/it/itIncubator/dopy/sprint2/extraTask0502/src/App.tsx"],"sourcesContent":["import './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {useState} from \"react\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type DataTaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    data: DataTaskType[],\r\n    filter:FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType\r\n}\r\n\r\nfunction App() {\r\n\r\n    // let todolistID1 = v1()\r\n    // let todolistID2 = v1()\r\n    //\r\n    // let [todolists, setTodolists] = useState<TodolistType[]>([\r\n    //     {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n    //     {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    // ])\r\n    //\r\n    // let [tasks, setTasks] = useState<TasksStateType>({\r\n    //     [todolistID1]: [\r\n    //         {id: v1(), title: 'HTML&CSS', isDone: true},\r\n    //         {id: v1(), title: 'JS', isDone: true},\r\n    //         {id: v1(), title: 'ReactJS', isDone: false},\r\n    //     ],\r\n    //     [todolistID2]: [\r\n    //         {id: v1(), title: 'Rest API', isDone: true},\r\n    //         {id: v1(), title: 'GraphQL', isDone: false},\r\n    //     ],\r\n    // })\r\n\r\n\r\n    let todolistID1 = v1()\r\n    let todolistID2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: todolistID1, title: 'What to learn',},\r\n        {id: todolistID2, title: 'What to buy',},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>(\r\n        {\r\n            [todolistID1]: {\r\n                data: [{id: v1(), title: 'HTML&CSS', isDone: true},\r\n                    {id: v1(), title: 'JS', isDone: true},\r\n                    {id: v1(), title: 'ReactJS', isDone: false}],\r\n                filter: 'all'\r\n            },\r\n            [todolistID2]: {\r\n                data: [{id: v1(), title: 'Rest API', isDone: true},\r\n                    {id: v1(), title: 'GraphQL', isDone: false}],\r\n                filter: 'all'\r\n            }\r\n        }\r\n    )\r\n\r\n    const removeTask = (taskId: string, todolistId: string) => {\r\n\r\n      const newToDoListTasks = {...tasks, todolistId:{...tasks.todolistId,data:tasks.todolistId.data.filter(task=>task.id !== todolistId)}};\r\n        setTasks(newToDoListTasks)\r\n\r\n        // const newTodolistTasks = {...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== taskId)}\r\n        // setTasks(newTodolistTasks)\r\n    }\r\n\r\n    const addTask = (title: string, todolistId: string) => {\r\n        // const newTask = {\r\n        //     id: v1(),\r\n        //     title: title,\r\n        //     isDone: false\r\n        // }\r\n        // const newTodolistTasks = {...tasks, [todolistId]: [newTask, ...tasks[todolistId]]}\r\n        // setTasks(newTodolistTasks)\r\n    }\r\n\r\n    const changeTaskStatus = (taskId: string, taskStatus: boolean, todolistId: string) => {\r\n        // const newTodolistTasks = {\r\n        //     ...tasks,\r\n        //     [todolistId]: tasks[todolistId].map(t => t.id == taskId ? {...t, isDone: taskStatus} : t)\r\n        // }\r\n        // setTasks(newTodolistTasks)\r\n    }\r\n\r\n    const changeFilter = (filter: FilterValuesType, todolistId: string) => {\r\n        // const newTodolists = todolists.map(tl => {\r\n        //     return tl.id === todolistId ? {...tl, filter} : tl\r\n        // })\r\n        // setTodolists(newTodolists)\r\n    }\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        // const newTodolists = todolists.filter(tl => tl.id !== todolistId)\r\n        // setTodolists(newTodolists)\r\n        //\r\n        // delete tasks[todolistId]\r\n        // setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((tl) => {\r\n\r\n                const allTodolistTasks = tasks[tl.id].data\r\n                let tasksForTodolist = allTodolistTasks\r\n\r\n                if (tasks[tl.id].filter === 'active') {\r\n                    tasksForTodolist =allTodolistTasks.filter(task => !task.isDone)\r\n                }\r\n\r\n                if (tasks[tl.id].filter === 'completed') {\r\n                  allTodolistTasks.filter(task => task.isDone)\r\n                }\r\n\r\n                return <Todolist\r\n                    key={tl.id}\r\n                    todolistId={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodolist}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    filter={tasks[tl.id].filter}\r\n                    removeTodolist={removeTodolist}\r\n                />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}