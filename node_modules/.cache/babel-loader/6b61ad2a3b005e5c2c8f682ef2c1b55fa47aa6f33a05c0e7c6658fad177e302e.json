{"ast":null,"code":"var _jsxFileName = \"D:\\\\it\\\\itIncubator\\\\dopy\\\\sprint2\\\\extraTask0502\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { Todolist } from \"./Todolist\";\nimport { useState } from \"react\";\nimport { v1 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // let todolistID1 = v1()\n  // let todolistID2 = v1()\n  //\n  // let [todolists, setTodolists] = useState<TodolistType[]>([\n  //     {id: todolistID1, title: 'What to learn', filter: 'all'},\n  //     {id: todolistID2, title: 'What to buy', filter: 'all'},\n  // ])\n  //\n  // let [tasks, setTasks] = useState<TasksStateType>({\n  //     [todolistID1]: [\n  //         {id: v1(), title: 'HTML&CSS', isDone: true},\n  //         {id: v1(), title: 'JS', isDone: true},\n  //         {id: v1(), title: 'ReactJS', isDone: false},\n  //     ],\n  //     [todolistID2]: [\n  //         {id: v1(), title: 'Rest API', isDone: true},\n  //         {id: v1(), title: 'GraphQL', isDone: false},\n  //     ],\n  // })\n\n  let todolistID1 = v1();\n  let todolistID2 = v1();\n  let [todolists, setTodolists] = useState([{\n    id: todolistID1,\n    title: 'What to learn',\n    filter: 'all'\n  }, {\n    id: todolistID2,\n    title: 'What to buy',\n    filter: 'all'\n  }]);\n  let [tasks, setTasks] = useState({\n    [todolistID1]: {\n      data: [{\n        id: v1(),\n        title: 'HTML&CSS',\n        isDone: true\n      }, {\n        id: v1(),\n        title: 'JS',\n        isDone: true\n      }, {\n        id: v1(),\n        title: 'ReactJS',\n        isDone: false\n      }],\n      filter: 'all'\n    },\n    [todolistID2]: {\n      data: [{\n        id: v1(),\n        title: 'Rest API',\n        isDone: true\n      }, {\n        id: v1(),\n        title: 'GraphQL',\n        isDone: false\n      }],\n      filter: 'all'\n    }\n  });\n  const removeTask = (taskId, todolistId) => {\n    const newTodolistTasks = {\n      ...tasks,\n      [todolistId]: tasks[todolistId].filter(t => t.id !== taskId)\n    };\n    setTasks(newTodolistTasks);\n  };\n  const addTask = (title, todolistId) => {\n    const newTask = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    const newTodolistTasks = {\n      ...tasks,\n      [todolistId]: [newTask, ...tasks[todolistId]]\n    };\n    setTasks(newTodolistTasks);\n  };\n  const changeTaskStatus = (taskId, taskStatus, todolistId) => {\n    const newTodolistTasks = {\n      ...tasks,\n      [todolistId]: tasks[todolistId].map(t => t.id == taskId ? {\n        ...t,\n        isDone: taskStatus\n      } : t)\n    };\n    setTasks(newTodolistTasks);\n  };\n  const changeFilter = (filter, todolistId) => {\n    const newTodolists = todolists.map(tl => {\n      return tl.id === todolistId ? {\n        ...tl,\n        filter\n      } : tl;\n    });\n    setTodolists(newTodolists);\n  };\n  const removeTodolist = todolistId => {\n    const newTodolists = todolists.filter(tl => tl.id !== todolistId);\n    setTodolists(newTodolists);\n    delete tasks[todolistId];\n    setTasks({\n      ...tasks\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: todolists.map(tl => {\n      const allTodolistTasks = tasks[tl.id];\n      let tasksForTodolist = allTodolistTasks;\n      if (tl.filter === 'active') {\n        tasksForTodolist = allTodolistTasks.filter(task => !task.isDone);\n      }\n      if (tl.filter === 'completed') {\n        tasksForTodolist = allTodolistTasks.filter(task => task.isDone);\n      }\n      return /*#__PURE__*/_jsxDEV(Todolist, {\n        todolistId: tl.id,\n        title: tl.title,\n        tasks: tasksForTodolist,\n        removeTask: removeTask,\n        changeFilter: changeFilter,\n        addTask: addTask,\n        changeTaskStatus: changeTaskStatus,\n        filter: tl.filter,\n        removeTodolist: removeTodolist\n      }, tl.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"0asTYynaffWltygQv+0pBLrd8do=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Todolist","useState","v1","jsxDEV","_jsxDEV","App","_s","todolistID1","todolistID2","todolists","setTodolists","id","title","filter","tasks","setTasks","data","isDone","removeTask","taskId","todolistId","newTodolistTasks","t","addTask","newTask","changeTaskStatus","taskStatus","map","changeFilter","newTodolists","tl","removeTodolist","className","children","allTodolistTasks","tasksForTodolist","task","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/it/itIncubator/dopy/sprint2/extraTask0502/src/App.tsx"],"sourcesContent":["import './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {useState} from \"react\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    // let todolistID1 = v1()\r\n    // let todolistID2 = v1()\r\n    //\r\n    // let [todolists, setTodolists] = useState<TodolistType[]>([\r\n    //     {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n    //     {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    // ])\r\n    //\r\n    // let [tasks, setTasks] = useState<TasksStateType>({\r\n    //     [todolistID1]: [\r\n    //         {id: v1(), title: 'HTML&CSS', isDone: true},\r\n    //         {id: v1(), title: 'JS', isDone: true},\r\n    //         {id: v1(), title: 'ReactJS', isDone: false},\r\n    //     ],\r\n    //     [todolistID2]: [\r\n    //         {id: v1(), title: 'Rest API', isDone: true},\r\n    //         {id: v1(), title: 'GraphQL', isDone: false},\r\n    //     ],\r\n    // })\r\n\r\n    \r\n    let todolistID1 = v1()\r\n    let todolistID2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>(\r\n        {\r\n            [todolistID1]: {\r\n                data: [{id: v1(), title: 'HTML&CSS', isDone: true},\r\n                    {id: v1(), title: 'JS', isDone: true},\r\n                    {id: v1(), title: 'ReactJS', isDone: false}],\r\n                filter: 'all'\r\n            },\r\n            [todolistID2]: {\r\n                data: [{id: v1(), title: 'Rest API', isDone: true},\r\n                    {id: v1(), title: 'GraphQL', isDone: false}],\r\n                filter: 'all'\r\n            }\r\n        }\r\n    )\r\n\r\n    const removeTask = (taskId: string, todolistId: string) => {\r\n        const newTodolistTasks = {...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== taskId)}\r\n        setTasks(newTodolistTasks)\r\n    }\r\n\r\n    const addTask = (title: string, todolistId: string) => {\r\n        const newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        const newTodolistTasks = {...tasks, [todolistId]: [newTask, ...tasks[todolistId]]}\r\n        setTasks(newTodolistTasks)\r\n    }\r\n\r\n\r\n    const changeTaskStatus = (taskId: string, taskStatus: boolean, todolistId: string) => {\r\n        const newTodolistTasks = {\r\n            ...tasks,\r\n            [todolistId]: tasks[todolistId].map(t => t.id == taskId ? {...t, isDone: taskStatus} : t)\r\n        }\r\n        setTasks(newTodolistTasks)\r\n    }\r\n\r\n    const changeFilter = (filter: FilterValuesType, todolistId: string) => {\r\n        const newTodolists = todolists.map(tl => {\r\n            return tl.id === todolistId ? {...tl, filter} : tl\r\n        })\r\n        setTodolists(newTodolists)\r\n    }\r\n\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        const newTodolists = todolists.filter(tl => tl.id !== todolistId)\r\n        setTodolists(newTodolists)\r\n\r\n        delete tasks[todolistId]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((tl) => {\r\n\r\n                const allTodolistTasks = tasks[tl.id]\r\n                let tasksForTodolist = allTodolistTasks\r\n\r\n                if (tl.filter === 'active') {\r\n                    tasksForTodolist = allTodolistTasks.filter(task => !task.isDone)\r\n                }\r\n\r\n                if (tl.filter === 'completed') {\r\n                    tasksForTodolist = allTodolistTasks.filter(task => task.isDone)\r\n                }\r\n\r\n                return <Todolist\r\n                    key={tl.id}\r\n                    todolistId={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodolist}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    filter={tl.filter}\r\n                    removeTodolist={removeTodolist}\r\n                />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}